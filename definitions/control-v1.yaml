---
openapi: 3.0.1
info:
  title: Control API v1
  version: 1.0.2
  description: |
    Ably allows you to manage your account using the Control API. Use Control API to manage your applications, namespaces, keys, rules, and more.
basePath: "/v1"
servers:
- url: https://control.ably.net/v1
paths:
  "/accounts/{account_id}/apps":
    get:
      operationId: listApps
      summary: Lists apps
      description: List all applications for the specified account ID.
      tags:
      - apps
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account ID for which to retrieve the associated applications.
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: List of apps returned
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/app_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates an app
      description: Creates an application with the specified properties.
      tags:
      - apps
      parameters:
      - name: account_id
        description: The account ID of the account in which to create the application.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '201':
          description: App created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/app_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/app_post"
  "/apps/{id}":
    patch:
      summary: Updates an app
      description: Updates the application with the specified application ID.
      tags:
      - apps
      parameters:
      - name: id
        description: The ID of application to be updated.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: App updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/app_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/app_patch"
    delete:
      summary: Deletes an app
      description: Deletes the application with the specified application ID.
      tags:
      - apps
      parameters:
      - name: id
        description: The ID of the application to be deleted.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '204':
          description: App deleted
          content: {}
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/apps/{id}/pkcs12":
    post:
      summary: Updates app's APNS info from a .p12 file
      description: Updates the application's Apple Push Notification Service (APNS) information.
      tags:
      - apps
      parameters:
      - name: id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: App updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/app_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/app_pkcs12"
  "/apps/{app_id}/keys":
    get:
      summary: Lists app keys
      description: Lists the API keys associated with the application ID.
      tags:
      - keys
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Key list
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/key_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates a key
      description: Creates an API key for the application specified.
      tags:
      - keys
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '201':
          description: Key created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/key_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/key_post"
  "/apps/{app_id}/keys/{key_id}":
    patch:
      summary: Updates a key
      description: Update the API key with the specified key ID, for the application with the specified application ID.
      tags:
      - keys
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: key_id
        description: The API key ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Key updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/key_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/key_patch"
  "/apps/{app_id}/keys/{key_id}/revoke":
    post:
      summary: Revokes a key
      description: Revokes the API key with the specified ID, with the Application ID.
      tags:
      - keys
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: key_id
        description: The key ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Key revoked
          content: {}
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/apps/{app_id}/namespaces":
    get:
      summary: Lists namespaces
      description: List the namespaces for the specified application ID.
      tags:
      - namespaces
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Namespace list
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/namespace_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates a namespace
      description: Creates a namespace for the specified application ID.
      tags:
      - namespaces
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '201':
          description: Namespace created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/namespace_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/namespace_post"
  "/apps/{app_id}/namespaces/{namespace_id}":
    patch:
      summary: Updates a namespace
      description: Updates the namespace with the specified ID, for the application with the specified application ID.
      tags:
      - namespaces
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: namespace_id
        description: The namespace ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Namespace updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/namespace_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/namespace_patch"
    delete:
      summary: Deletes a namespace
      description: Deletes the namespace with the specified ID, for the specified application ID.
      tags:
      - namespaces
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: namespace_id
        description: The namespace ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '204':
          description: Namespace deleted
          content: {}
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/apps/{app_id}/rules":
    get:
      summary: Lists reactor rules
      description: Lists the rules for the application specified by the application ID.
      tags:
      - rules
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Reactor rule list
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/rule_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates a reactor rule
      description: Creates a rule for the application with the specified application ID. 
      tags:
      - rules
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '201':
          description: Reactor rule created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/rule_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        description: The rule properties.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/rule_post"
  "/apps/{app_id}/rules/{rule_id}":
    get:
      summary: Gets a reactor rule by ID
      description: Returns the rule specified by the rule ID, for the application specified by application ID.
      tags:
      - rules
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: rule_id
        description: The rule ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Reactor rule
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/rule_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    patch:
      summary: Updates a reactor rule
      tags:
      - rules
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: rule_id
        description: The rule ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Reactor rule updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/rule_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        description: Properties for the rule.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/rule_patch"
    delete:
      summary: Deletes a reactor rule
      tags:
      - rules
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: rule_id
        description: The rule ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '204':
          description: Reactor rule deleted
          content: {}
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
  schemas:
    rule_post:
      oneOf:
      - "$ref": "#/components/schemas/webhook_rule_post"
      - "$ref": "#/components/schemas/generic_http_rule_post"
      - "$ref": "#/components/schemas/aws_kinesis_rule_post"
      - "$ref": "#/components/schemas/aws_sqs_rule_post"
      - "$ref": "#/components/schemas/aws_lambda_rule_post"
      discriminator:
        propertyName: type
        mapping:
          webhook: "#/components/schemas/webhook_rule_post"
          generic.http: "#/components/schemas/generic_http_rule_post"
          aws.kinesis: "#/components/schemas/aws_kinesis_rule_post"
          aws.sqs: "#/components/schemas/aws_sqs_rule_post"
          aws.lambda: "#/components/schemas/aws_lambda_rule_post"
    rule_patch:
      oneOf:
      - "$ref": "#/components/schemas/webhook_rule_patch"
      - "$ref": "#/components/schemas/generic_http_rule_patch"
      - "$ref": "#/components/schemas/aws_kinesis_rule_patch"
      - "$ref": "#/components/schemas/aws_sqs_rule_patch"
      - "$ref": "#/components/schemas/aws_lambda_rule_patch"
      discriminator:
        propertyName: type
        mapping:
          webhook: "#/components/schemas/webhook_rule_patch"
          generic.http: "#/components/schemas/generic_http_rule_patch"
          aws.kinesis: "#/components/schemas/aws_kinesis_rule_patch"
          aws.sqs: "#/components/schemas/aws_sqs_rule_patch"
          aws.lambda: "#/components/schemas/aws_lambda_rule_patch"
    rule_response:
      oneOf:
      - "$ref": "#/components/schemas/webhook_rule_response"
      - "$ref": "#/components/schemas/generic_http_rule_response"
      - "$ref": "#/components/schemas/aws_kinesis_rule_response"
      - "$ref": "#/components/schemas/aws_sqs_rule_response"
      - "$ref": "#/components/schemas/aws_lambda_rule_response"
      discriminator:
        propertyName: type
        mapping:
          webhook: "#/components/schemas/webhook_rule_response"
          generic.http: "#/components/schemas/generic_http_rule_response"
          aws.kinesis: "#/components/schemas/aws_kinesis_rule_response"
          aws.sqs: "#/components/schemas/aws_sqs_rule_response"
          aws.lambda: "#/components/schemas/aws_lambda_rule_response"
    webhook_rule_post:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          - channel.lifecycle
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - webhook
          description: The webhook rule type. Triggers an HTTP callback to an endpoint of your choosing when events occur on your Ably channels.
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably. 
          required:
          - url
          description: The endpoint that is invoked when events occur on Ably.
      required:
      - target
      - type
      - format
      - source
    webhook_rule_patch:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          - channel.lifecycle
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          description: The webhook rule type. Triggers an HTTP callback to an endpoint of your choosing when events occur on your Ably channels.
          type: string
          enum:
          - webhook
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          description: The endpoint that is invoked when events occur on Ably.
    webhook_rule_response:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          - channel.lifecycle
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - webhook
          description: The webhook rule type. Triggers an HTTP callback to an endpoint of your choosing when events occur on your Ably channels.
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          required:
          - url
          description: The endpoint that is invoked when events occur on Ably.
        id:
          type: string
          description: The rule ID.
        appId:
          type: string
          description: TODO - I don't seem to receive this in the response when creating a webhook rule.
        version:
          type: string
        status:
          type: integer
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification of the rule.
        _links:
          type: object
          nullable: true
          description: A link self-referencing the rule that has been created.
      required:
      - target
      - type
      - format
      - source
    generic_http_rule_post:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
          description: TODO
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - generic.http
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          required:
          - url
          description: The endpoint that is invoked when events occur on Ably.
      required:
      - target
      - type
      - format
      - source
    generic_http_rule_patch:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - generic.http
          description: TODO
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          description: The endpoint that is invoked when events occur on Ably.
    generic_http_rule_response:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type:
          - string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - generic.http
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          required:
          - url
          description: The endpoint that is invoked when events occur on Ably.        
        id:
          type: string
        appId:
          type: string
        version:
          type: string
        status:
          type: integer
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification of the rule.
        _links:
          type: object
          nullable: true
          description: A link self-referencing the rule that has been created.
      required:
      - target
      - type
      - format
      - source
    aws_kinesis_rule_post:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        routingKey:
          type: string
        type:
          type: string
          enum:
          - aws.kinesis
        request_mode:
          type: string
          enum:
          - single
          - batch
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
            awsRegion:
              type: string
            streamName:
              type: string
          required:
          - streamName
          - awsRegion
          description: The endpoint that is invoked when events occur on Ably.
      required:
      - target
      - routingKey
      - type
      - format
      - source
    aws_kinesis_rule_patch:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        routingKey:
          type: string
        type:
          type: string
          enum:
          - aws.kinesis
        request_mode:
          type: string
          enum:
          - single
          - batch
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
            awsRegion:
              type: string
            streamName:
              type: string
          description: The endpoint that is invoked when events occur on Ably.
    aws_kinesis_rule_response:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        routingKey:
          type: string
        type:
          type: string
          enum:
          - aws.kinesis
        request_mode:
          type: string
          enum:
          - single
          - batch
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
            awsRegion:
              type: string
            streamName:
              type: string
          required:
          - streamName
          - awsRegion
          description: The endpoint that is invoked when events occur on Ably.        
        id:
          type: string
        appId:
          type: string
        version:
          type: string
        status:
          type: integer
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification of the rule.
        _links:
          type: object
          nullable: true
          description: A link self-referencing the rule that has been created.
      required:
      - target
      - routingKey
      - type
      - format
      - source
    aws_sqs_rule_post:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.sqs
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
            awsRegion:
              type: string
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          required:
          - url
          - awsRegion
          description: The endpoint that is invoked when events occur on Ably.
      required:
      - target
      - type
      - format
      - source
    aws_sqs_rule_patch:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.sqs
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
            awsRegion:
              type: string
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          description: The endpoint that is invoked when events occur on Ably.
    aws_sqs_rule_response:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.sqs
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
            awsRegion:
              type: string
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          required:
          - url
          - awsRegion
          description: The endpoint that is invoked when events occur on Ably.
        id:
          type: string
        appId:
          type: string
        version:
          type: string
        status:
          type: integer
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification of the rule.
        _links:
          type: object
          nullable: true
          description: A link self-referencing the rule that has been created.
      required:
      - target
      - type
      - format
      - source
    aws_lambda_rule_post:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.lambda
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
            awsRegion:
              type: string
            functionName:
              type: string
            qualifier:
              type: string
          required:
          - awsRegion
          - functionName
          description: The endpoint that is invoked when events occur on Ably.
      required:
      - target
      - type
      - format
      - source
    aws_lambda_rule_patch:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.lambda
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
            awsRegion:
              type: string
            functionName:
              type: string
            qualifier:
              type: string
          description: The endpoint that is invoked when events occur on Ably.
    aws_lambda_rule_response:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.lambda
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
            awsRegion:
              type: string
            functionName:
              type: string
            qualifier:
              type: string
          required:
          - awsRegion
          - functionName
          description: The endpoint that is invoked when events occur on Ably.
        id:
          type: string
        appId:
          type: string
        version:
          type: string
        status:
          type: integer
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification of the rule.
        _links:
          type: object
          nullable: true
          description: A link self-referencing the rule that has been created.
      required:
      - target
      - type
      - format
      - source
    namespace_post:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        authenticated:
          type: boolean
          default: false
        persisted:
          type: boolean
          default: false
        pushEnabled:
          type: boolean
          default: false
        tlsOnly:
          type: boolean
          default: false
      required:
      - id
    namespace_patch:
      type: object
      additionalProperties: false
      properties:
        authenticated:
          type: boolean
        persisted:
          type: boolean
        pushEnabled:
          type: boolean
        tlsOnly:
          type: boolean
    namespace_response:
      type: object
      additionalProperties: false
      properties:
        authenticated:
          type: boolean
        created:
          type: integer
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: integer
          description: Unix timestamp representing the date and time of last modification of the rule.
        id:
          type: string
        persisted:
          type: boolean
        pushEnabled:
          type: boolean
        tlsOnly:
          type: boolean
    app_post:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        status:
          type: string
          enum:
          - enabled
          - disabled
        tlsOnly:
          type: boolean
          nullable: true
        enablePusherCompatibility:
          type: boolean
          nullable: true
        fcmKey:
          type: string
          nullable: true
        setupPusherNamespaces:
          type: boolean
        apnsCertificate:
          type: string
          nullable: true
        apnsPrivateKey:
          type: string
          nullable: true
        apnsUseSandboxEndpoint:
          type: boolean
          nullable: true
      required:
      - name
    app_patch:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        status:
          type: string
          enum:
          - enabled
          - disabled
        tlsOnly:
          type: boolean
          nullable: true
        enablePusherCompatibility:
          type: boolean
          nullable: true
        fcmKey:
          type: string
          nullable: true
        setupPusherNamespaces:
          type: boolean
        apnsCertificate:
          type: string
          nullable: true
        apnsPrivateKey:
          type: string
          nullable: true
        apnsUseSandboxEndpoint:
          type: boolean
          nullable: true
    app_pkcs12:
      type: object
      additionalProperties: false
      properties:
        p12File:
          type: string
          format: binary
        p12Pass:
          type: string
      required:
      - p12File
      - p12Pass
    app_response:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
          - enabled
          - disabled
        tlsOnly:
          type: boolean
          nullable: true
        enablePusherCompatibility:
          type: boolean
          nullable: true
        fcmKey:
          type: string
          nullable: true
        apnsCertificate:
          type: string
          nullable: true
        apnsUseSandboxEndpoint:
          type: boolean
          nullable: true
        _links:
          type: object
          nullable: true
          description: A link self-referencing the app that has been created.
    key_post:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        channels:
          type: string
        capabilities:
          type: array
          items:
            type: string
            enum:
            - publish
            - subscribe
            - history
            - presence
            - channel-metadata
            - push-admin
            - push-subscribe
            - statistics
      required:
      - name
      - channels
      - capabilities
    key_patch:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        channels:
          type: string
        capabilities:
          type: array
          items:
            type: string
            enum:
            - publish
            - subscribe
            - history
            - presence
            - channel-metadata
            - push-admin
            - push-subscribe
            - statistics
    key_response:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
        name:
          type: string
        whole_key:
          type: string
        channels:
          type: string
        capabilities:
          type: array
          items:
            type: string
        created:
          type: integer
          description: Unix timestamp representing the date and time of creation of the key.
    error:
      type: object
      additionalProperties: false
      properties:
        message:
          type: string
        code:
          type: integer
        statusCode:
          type: integer
        href:
          type: string
        details:
          type: object
          nullable: true
      required:
      - message
      - code
      - statusCode
      - href
