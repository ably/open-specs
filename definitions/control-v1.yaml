---
openapi: 3.0.1
info:
  title: Control API v1
  version: 1.0.8
  description: |
    Ably allows you to manage your account using the Control API. Use Control API to manage your applications, namespaces, keys, queues, rules, and more.

    Detailed documentation on using this API can be found <a href="https://ably.com/documentation/control-api">here</a>.

servers:
- url: https://control.ably.net/v1
paths:
  "/accounts/{account_id}/apps":
    get:
      operationId: listApps
      summary: Lists apps
      description: List all applications for the specified account ID.
      tags:
      - apps
      parameters:
      - name: account_id
        in: path
        required: true
        description: The account ID for which to retrieve the associated applications.
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: List of apps returned
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/app_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates an app
      description: Creates an application with the specified properties.
      tags:
      - apps
      parameters:
      - name: account_id
        description: The account ID of the account in which to create the application.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '201':
          description: App created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/app_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/app_post"
  "/apps/{id}":
    patch:
      summary: Updates an app
      description: Updates the application with the specified application ID.
      tags:
      - apps
      parameters:
      - name: id
        description: The ID of application to be updated.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: App updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/app_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/app_patch"
    delete:
      summary: Deletes an app
      description: Deletes the application with the specified application ID.
      tags:
      - apps
      parameters:
      - name: id
        description: The ID of the application to be deleted.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '204':
          description: App deleted
          content: {}
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/apps/{id}/pkcs12":
    post:
      summary: Updates app's APNs info from a .p12 file
      description: Updates the application's Apple Push Notification service (APNs) information.
      tags:
      - apps
      parameters:
      - name: id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: App updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/app_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/app_pkcs12"
  "/apps/{app_id}/keys":
    get:
      summary: Lists app keys
      description: Lists the API keys associated with the application ID.
      tags:
      - keys
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Key list
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/key_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates a key
      description: Creates an API key for the application specified.
      tags:
      - keys
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '201':
          description: Key created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/key_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/key_post"
  "/apps/{app_id}/keys/{key_id}":
    patch:
      summary: Updates a key
      description: Update the API key with the specified key ID, for the application with the specified application ID.
      tags:
      - keys
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: key_id
        description: The API key ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Key updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/key_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/key_patch"
  "/apps/{app_id}/keys/{key_id}/revoke":
    post:
      summary: Revokes a key
      description: Revokes the API key with the specified ID, with the Application ID. This deletes the key.
      tags:
      - keys
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: key_id
        description: The key ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Key revoked
          content: {}
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/apps/{app_id}/namespaces":
    get:
      summary: Lists namespaces
      description: List the namespaces for the specified application ID.
      tags:
      - namespaces
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Namespace list
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/namespace_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates a namespace
      description: Creates a namespace for the specified application ID.
      tags:
      - namespaces
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '201':
          description: Namespace created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/namespace_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/namespace_post"
  "/apps/{app_id}/namespaces/{namespace_id}":
    patch:
      summary: Updates a namespace
      description: Updates the namespace with the specified ID, for the application with the specified application ID.
      tags:
      - namespaces
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: namespace_id
        description: The namespace ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Namespace updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/namespace_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/namespace_patch"
    delete:
      summary: Deletes a namespace
      description: Deletes the namespace with the specified ID, for the specified application ID.
      tags:
      - namespaces
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: namespace_id
        description: The namespace ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '204':
          description: Namespace deleted
          content: {}
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/apps/{app_id}/queues":
    get:
      summary: Lists queues
      description: Lists the queues associated with the specified application ID.
      tags:
      - queues
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Queue list
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/queue_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '503':
          description: 503 Service unavailable
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates a queue
      description: Creates a queue for the application specified by application ID. The properties for the queue to be created are specified in the request body.
      tags:
      - queues
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '201':
          description: Queue created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/queue_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/queue"
  "/apps/{app_id}/queues/{queue_name}":
    delete:
      summary: Deletes a queue
      description: Delete the queue with the specified queue name, from the application with the specified application ID.
      tags:
      - queues
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: queue_name
        description: The queue name.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '204':
          description: Queue deleted
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '503':
          description: 503 Service unavailable
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        description: The queue endpoint.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/queue_endpoint"
  "/apps/{app_id}/rules":
    get:
      summary: Lists Reactor rules
      description: Lists the rules for the application specified by the application ID.
      tags:
      - rules
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Reactor rule list
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/rule_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    post:
      summary: Creates a Reactor rule
      description: Creates a rule for the application with the specified application ID. 
      tags:
      - rules
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '201':
          description: Reactor rule created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/rule_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        description: The rule properties.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/rule_post"
  "/apps/{app_id}/rules/{rule_id}":
    get:
      summary: Gets a reactor rule by rule ID
      description: Returns the rule specified by the rule ID, for the application specified by application ID.
      tags:
      - rules
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: rule_id
        description: The rule ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Reactor rule
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/rule_response"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
    patch:
      summary: Updates a Reactor rule
      tags:
      - rules
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: rule_id
        description: The rule ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Reactor rule updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/rule_response"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '422':
          description: Invalid request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        description: Properties for the rule.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/rule_patch"
    delete:
      summary: Deletes a Reactor rule
      tags:
      - rules
      parameters:
      - name: app_id
        description: The application ID.
        in: path
        required: true
        schema:
          type: string
      - name: rule_id
        description: The rule ID.
        in: path
        required: true
        schema:
          type: string
      security:
      - bearer_auth: []
      responses:
        '204':
          description: Reactor rule deleted
          content: {}
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '404':
          description: App not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '504':
          description: Gateway timeout
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
  "/me":
    get:
      summary: Get token details
      tags:
      - tokens
      security:
      - bearer_auth: []
      responses:
        '200':
          description: Token details
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/me"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"

components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      description: Control API uses bearer authentication. You need to generate an access token for use with this API. More details can be found <a href="https://ably.com/documentation/control-api/#authentication">here</a>.
  schemas:
    rule_post:
      oneOf:
      - "$ref": "#/components/schemas/webhook_rule_post"
      - "$ref": "#/components/schemas/generic_http_rule_post"
      - "$ref": "#/components/schemas/aws_kinesis_rule_post"
      - "$ref": "#/components/schemas/aws_sqs_rule_post"
      - "$ref": "#/components/schemas/aws_lambda_rule_post"
      discriminator:
        propertyName: type
        mapping:
          webhook: "#/components/schemas/webhook_rule_post"
          generic.http: "#/components/schemas/generic_http_rule_post"
          aws.kinesis: "#/components/schemas/aws_kinesis_rule_post"
          aws.sqs: "#/components/schemas/aws_sqs_rule_post"
          aws.lambda: "#/components/schemas/aws_lambda_rule_post"
    rule_patch:
      oneOf:
      - "$ref": "#/components/schemas/webhook_rule_patch"
      - "$ref": "#/components/schemas/generic_http_rule_patch"
      - "$ref": "#/components/schemas/aws_kinesis_rule_patch"
      - "$ref": "#/components/schemas/aws_sqs_rule_patch"
      - "$ref": "#/components/schemas/aws_lambda_rule_patch"
      discriminator:
        propertyName: type
        mapping:
          webhook: "#/components/schemas/webhook_rule_patch"
          generic.http: "#/components/schemas/generic_http_rule_patch"
          aws.kinesis: "#/components/schemas/aws_kinesis_rule_patch"
          aws.sqs: "#/components/schemas/aws_sqs_rule_patch"
          aws.lambda: "#/components/schemas/aws_lambda_rule_patch"
    rule_response:
      oneOf:
      - "$ref": "#/components/schemas/webhook_rule_response"
      - "$ref": "#/components/schemas/generic_http_rule_response"
      - "$ref": "#/components/schemas/aws_kinesis_rule_response"
      - "$ref": "#/components/schemas/aws_sqs_rule_response"
      - "$ref": "#/components/schemas/aws_lambda_rule_response"
      discriminator:
        propertyName: type
        mapping:
          webhook: "#/components/schemas/webhook_rule_response"
          generic.http: "#/components/schemas/generic_http_rule_response"
          aws.kinesis: "#/components/schemas/aws_kinesis_rule_response"
          aws.sqs: "#/components/schemas/aws_sqs_rule_response"
          aws.lambda: "#/components/schemas/aws_lambda_rule_response"
    webhook_rule_post:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
          description: API key ID.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          - channel.lifecycle
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - webhook
          description: The webhook rule type. Triggers an HTTP callback to an endpoint of your choosing when events occur on your Ably channels.
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably. 
          required:
          - url
          description: The endpoint that is invoked when events occur on Ably.
      required:
      - target
      - type
      - format
      - source
    webhook_rule_patch:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
          description: API key ID.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          - channel.lifecycle
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          description: The webhook rule type. Triggers an HTTP callback to an endpoint of your choosing when events occur on your Ably channels.
          type: string
          enum:
          - webhook
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          description: The endpoint that is invoked when events occur on Ably.
    webhook_rule_response:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
          description: API key ID.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          - channel.lifecycle
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - webhook
          description: The webhook rule type. Triggers an HTTP callback to an endpoint of your choosing when events occur on your Ably channels.
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          required:
          - url
          description: The endpoint that is invoked when events occur on Ably.
        id:
          type: string
          description: The rule ID.
        appId:
          type: string
          description: The application ID.
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned. Please see the <a href="https://ably.com/documentation/general/events">Reactor Events documentation</a>.
        status:
          type: integer
          description: The status of the rule. Rules can be enabled or disabled.
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification of the rule.
        _links:
          type: object
          nullable: true
          description: A link self-referencing the rule that has been created.
      required:
      - target
      - type
      - format
      - source
    generic_http_rule_post:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
          description: API key ID.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - generic.http
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          required:
          - url
          description: The endpoint that is invoked when events occur on Ably.
      required:
      - target
      - type
      - format
      - source
    generic_http_rule_patch:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
          description: API key ID.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - generic.http
          description: The rule type.
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          description: The endpoint that is invoked when events occur on Ably.
    generic_http_rule_response:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        keyId:
          type: string
          nullable: true
          description: API key ID.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - generic.http
        headers:
          type: array
          items:
            type: string
          description: If you have additional information to send, you'll need to include the relevant headers.
        target:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          required:
          - url
          description: The endpoint that is invoked when events occur on Ably.        
        id:
          type: string
          description: The Reactor rule ID.
        appId:
          type: string
          description: The application ID that this rule applies to.
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned. Please see the <a href="https://ably.com/documentation/general/events">Reactor Events documentation</a>.
        status:
          type: integer
          description: The status of the rule. Rules can be enabled or disabled.
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification of the rule.
        _links:
          type: object
          nullable: true
          description: A link self-referencing the rule that has been created.
      required:
      - target
      - type
      - format
      - source
    aws_kinesis_rule_post:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        routingKey:
          type: string
          description: The partition key. See this <a href="https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule">article</a> for details.
        type:
          type: string
          enum:
          - aws.kinesis
          description: The type of the rule being created.
        request_mode:
          type: string
          enum:
          - single
          - batch
          description: This will either be in Single Request mode or Batch Request mode. Single Request will send each event as separately to the endpoint specified by the Rule. Batch Request will roll up multiple events in the same request. You can read more about the difference between single and batched events <a href="https://ably.com/documentation/general/events#batching">here</a>.
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">article</a> for details.
            assumeRoleArn:
              type: string
              description: If you chose the "ARN of an assumable role" credential option, this is your Assume Role ARN. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">article</a> for details.
            awsRegion:
              type: string
              description: The region you chose for your AWS Kinesis Stream.
            streamName:
              type: string
              description: The stream name you chose for your AWS Kinesis Stream.
          required:
          - streamName
          - awsRegion
          description: The endpoint that is invoked when events occur on Ably.
      required:
      - target
      - routingKey
      - type
      - format
      - source
    aws_kinesis_rule_patch:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        routingKey:
          type: string
          description: The partition key. See this <a href="https://knowledge.ably.com/what-is-the-format-of-the-routingkey-for-an-amqp-or-kinesis-reactor-rule">article</a> for details.
        type:
          type: string
          enum:
          - aws.kinesis
          description: The type of the rule being created.
        request_mode:
          type: string
          enum:
          - single
          - batch
          description: This will either be in Single Request mode or Batch Request mode. Single Request will send each event as separately to the endpoint specified by the Rule. Batch Request will roll up multiple events in the same request. You can read more about the difference between single and batched events <a href="https://ably.com/documentation/general/events#batching">here</a>.        
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
              description: If you chose the "ARN of an assumable role" credential option, this is your Assume Role ARN. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">article</a> for details.
            awsRegion:
              type: string
              description: The region you chose for your AWS Kinesis Stream.
            streamName:
              type: string
              description: The stream name you chose for your AWS Kinesis Stream.
          description: The endpoint that is invoked when events occur on Ably.
    aws_kinesis_rule_response:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        routingKey:
          type: string
        type:
          type: string
          enum:
          - aws.kinesis
        request_mode:
          type: string
          enum:
          - single
          - batch
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
              description: If you chose the "ARN of an assumable role" credential option, this is your Assume Role ARN. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">article</a> for details.
            awsRegion:
              type: string
              description: The region you chose for your AWS Kinesis Stream.
            streamName:
              type: string
              description: The stream name you chose for your AWS Kinesis Stream.
          required:
          - streamName
          - awsRegion
          description: The endpoint that is invoked when events occur on Ably.        
        id:
          type: string
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned. Please see the <a href="https://ably.com/documentation/general/events">Reactor Events documentation</a>.
        status:
          type: integer
          description: The status of the rule. Rules can be enabled or disabled.
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification of the rule.
        _links:
          type: object
          nullable: true
          description: A link self-referencing the rule that has been created.
      required:
      - target
      - routingKey
      - type
      - format
      - source
    aws_sqs_rule_post:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.sqs
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
              description: If you chose the "ARN of an assumable role" credential option, this is your Assume Role ARN. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">article</a> for details.
            awsRegion:
              type: string
              description: The region you chose for your AWS Kinesis Stream.
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          required:
          - url
          - awsRegion
          description: The endpoint that is invoked when events occur on Ably.
      required:
      - target
      - type
      - format
      - source
    aws_sqs_rule_patch:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.sqs
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
              description: If you chose the "ARN of an assumable role" credential option, this is your Assume Role ARN. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">article</a> for details.
            awsRegion:
              type: string
              description: The region you chose for your AWS Kinesis Stream.
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          description: The endpoint that is invoked when events occur on Ably.
    aws_sqs_rule_response:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.sqs
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
              description: If you chose the "ARN of an assumable role" credential option, this is your Assume Role ARN. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">article</a> for details.
            awsRegion:
              type: string
              description: The region you chose for your AWS Kinesis Stream.
            url:
              type: string
              description: The URL of the endpoint that is invoked when events occur on Ably.
          required:
          - url
          - awsRegion
          description: The endpoint that is invoked when events occur on Ably.
        id:
          type: string
          description: The Rule ID.
        appId:
          type: string
          description: The application ID that this rule applies to.
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned. Please see the <a href="https://ably.com/documentation/general/events">Reactor Events documentation</a>.
        status:
          type: integer
          description: The status of the rule. Rules can be enabled or disabled.
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification of the rule.
        _links:
          type: object
          nullable: true
          description: A link self-referencing the rule that has been created.
      required:
      - target
      - type
      - format
      - source
    aws_lambda_rule_post:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.lambda
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
              description: If you chose the "ARN of an assumable role" credential option, this is your Assume Role ARN. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">article</a> for details.
            awsRegion:
              type: string
              description: The region you chose for your AWS Kinesis Stream.
            functionName:
              type: string
            qualifier:
              type: string
          required:
          - awsRegion
          - functionName
          description: The endpoint that is invoked when events occur on Ably.
      required:
      - target
      - type
      - format
      - source
    aws_lambda_rule_patch:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.lambda
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
              description: If you chose the "ARN of an assumable role" credential option, this is your Assume Role ARN. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">article</a> for details.
            awsRegion:
              type: string
              description: The region you chose for your AWS Kinesis Stream.
            functionName:
              type: string
            qualifier:
              type: string
          description: The endpoint that is invoked when events occur on Ably.
    aws_lambda_rule_response:
      type: object
      additionalProperties: false
      properties:
        channelFilter:
          type: string
          nullable: true
          description: This field allows you to filter your Rule based on a regular expression that is matched against the complete channel name. Leave this empty if you want the Rule to apply to all channels.
        enveloped:
          type: boolean
          nullable: true
          description: Messages delivered through Reactor are wrapped in an Ably envelope by default that contains metadata about the message and its payload. The form of the envelope depends on whether it is part of a Webhook/Function or a Queue/Firehose rule. For everything besides Webhooks, you can ensure you only get the raw payload by unchecking "Enveloped" when setting up the rule.
        format:
          type: string
          enum:
          - json
          - msgpack
          description: JSON provides a simpler text based encoding, whereas MsgPack provides a more efficient binary encoding.
        source:
          type: string
          enum:
          - channel.message
          - channel.presence
          description: Message Reactor delivers all messages published on a channel. Presence Reactor delivers all enter, update and leave events for members present on a channel. Channel Lifecycle events for this rule type are currently not supported. Get in touch (https://ably.com/contact) if you need this feature.
        type:
          type: string
          enum:
          - aws.lambda
        request_mode:
          type: string
          enum:
          - single
        target:
          type: object
          additionalProperties: false
          properties:
            awsCredentials:
              type: string
              description: The AWS key ID and secret key for the AWS IAM user. The key ID and secret key is colon separated. For example, if your key ID is 'foo' and your secret key is 'bar', 'foo:bar' would be in this field.
            assumeRoleArn:
              type: string
              description: If you chose the "ARN of an assumable role" credential option, this is your Assume Role ARN. See this <a href="https://knowledge.ably.com/authentication-for-reactor-rules-for-aws-reactor-events-for-lambda-functions-reactor-firehose-for-aws-sqs-and-kinesis">article</a> for details.
            awsRegion:
              type: string
              description: The region you chose for your AWS Kinesis Stream.
            functionName:
              type: string
            qualifier:
              type: string
          required:
          - awsRegion
          - functionName
          description: The endpoint that is invoked when events occur on Ably.
        id:
          type: string
        appId:
          type: string
          description: The application ID that this rule applies to.
        version:
          type: string
          description: API version. Events and the format of their payloads are versioned. Please see the <a href="https://ably.com/documentation/general/events">Reactor Events documentation</a>.
        status:
          type: integer
          description: The status of the rule. Rules can be enabled or disabled.
        created:
          type: number
          description: Unix timestamp representing the date and time of creation of the rule.
        modified:
          type: number
          description: Unix timestamp representing the date and time of last modification of the rule.
        _links:
          type: object
          nullable: true
          description: A link self-referencing the rule that has been created.
      required:
      - target
      - type
      - format
      - source
    queue:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
          description: A friendly name for your queue.
          example: My queue
        ttl:
          type: integer
          description: TTL in minutes.
          example: 60
        maxLength:
          type: integer
          description: Message limit in number of messages.
          example: 10000
        region:
          type: string
          description: The data center region. US East (Virginia) or EU West (Ireland). Values are `us-east-1-a` or `eu-west-1-a`.
          example: us-east-1-a
      required:
      - name
      - ttl
      - maxLength
      - region
    queue_endpoint:
      type: object
      additionalProperties: false
      properties:
        endpointServer:
          type: string
          description: The queue endpoint server.
          example: eu-west-1-a-queue.ably.io:15671
        endpointVhost:
          type: string
          description: The queue endpoint virtual host.
          example: shared
      required:
      - endpointServer
      - endpointVhost
    queue_response:
      type: object
      additionalProperties: false
      properties:
        endpoint_friendly_name:
          type: string
          description: The friendly name of the queue endpoint.
          example: EU West (Ireland)
        endpoint_server:
          type: string
          description: The queue server endpoint.
          example: eu-west-1-a-queue.ably.io:15671
        endpoint_host:
          type: string
          description: The queue endpoint host.
          example: eu-west-1-a-queue.ably.io
        region:
          type: string
          description: The data center region for the queue.
          example: eu-west-1-a
        name:
          type: string
          description: The friendly name of the queue.
          example: 28GY6w:My queue
        vhost:
          type: string
          description: The virtual host.
          example: shared
        state:
          type: string
          description: The current state of the queue.
          example: Running
        messages_ready:
          type: integer
          nullable: true
          description: The number of ready messages in the queue.
          example: 0
        messages_unacknowledged:
          type: integer
          nullable: true
          description: The number of unacknowledged messages in the queue.
          example: 0
        messages:
          type: integer
          nullable: true
          description: The number of messages in the queue
          example: 0
        ttl:
          type: integer
          description: TTL in minutes.
          example: 60
        maxLength:
          type: integer
          description: Message limit in number of messages.
          example: 10000
        app_name:
          type: string
          description: The application name.
          example: Default
        app_api_id:
          type: string
          description: The application ID.
          example: 28GY6w
        friendly_name:
          type: string
          description: The friendly name for the queue.
          example: Default (28GY6w) - My queue
        deadletter:
          type: boolean
          description: A boolean that indicates whether this is a dead letter queue or not.
          example: false
    namespace_post:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: The namespace or channel name that the channel rule will apply to. For example, if you specify `namespace` the namespace will be set to `namespace` and will match with channels `namespace:*` and `namespace`. 
          example: namespace
        authenticated:
          type: boolean
          default: false
          description: If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See <a href="https://knowledge.ably.com/authenticated-and-identified-clients">here</a> for more details.
          example: false
        persisted:
          type: boolean
          default: false
          description: If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.
          example: false
        persistLast:
          type: boolean
          default: false
          description: If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation. 
          example: false
        pushEnabled:
          type: boolean
          default: false
          description: If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.
          example: false
        tlsOnly:
          type: boolean
          default: false
          description: If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.
          example: false
      required:
      - id
    namespace_patch:
      type: object
      additionalProperties: false
      properties:
        authenticated:
          type: boolean
          default: false
          description: If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See <a href="https://knowledge.ably.com/authenticated-and-identified-clients">here</a> for more details.
          example: false
        persisted:
          type: boolean
          default: false
          description: If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.
          example: false
        persistLast:
          type: boolean
          default: false
          description: If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation. 
          example: false
        pushEnabled:
          type: boolean
          default: false
          description: If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.
          example: false
        tlsOnly:
          type: boolean
          default: false
          description: If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.
          example: false
    namespace_response:
      type: object
      additionalProperties: false
      properties:
        authenticated:
          type: boolean
          default: false
          description: If `true`, clients will not be permitted to use (including to attach, publish, or subscribe) any channels within this namespace unless they are identified, that is, authenticated using a client ID. See <a href="https://knowledge.ably.com/authenticated-and-identified-clients">here</a> for more details.
          example: false
        created:
          type: integer
          description: Unix timestamp representing the date and time of creation of the namespace.
        modified:
          type: integer
          description: Unix timestamp representing the date and time of last modification of the namespace.
        id:
          type: string
          description: The namespace or channel name that the channel rule will apply to. For example, if you specify `namespace` the namespace will be set to `namespace` and will match with channels `namespace:*` and `namespace`. 
          example: namespace
        persisted:
          type: boolean
          default: false
          description: If `true`, all messages on a channel will be stored for 24 hours. You can access stored messages via the History API. Please note that for each message stored, an additional message is deducted from your monthly allocation.
          example: false
        persistLast:
          type: boolean
          default: false
          description: If `true`, the last message published on a channel will be stored for 365 days. You can access the stored message only by using the channel rewind mechanism and attaching with rewind=1. Please note that for each message stored, an additional message is deducted from your monthly allocation. 
          example: false
        pushEnabled:
          type: boolean
          default: false
          description: If `true`, publishing messages with a push payload in the extras field is permitted and can trigger the delivery of a native push notification to registered devices for the channel.
          example: false
        tlsOnly:
          type: boolean
          default: false
          description: If `true`, only clients that are connected using TLS will be permitted to subscribe to any channels within this namespace.
          example: false
    app_post:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        status:
          type: string
          enum:
          - enabled
          - disabled
        tlsOnly:
          type: boolean
          nullable: true
        enablePusherCompatibility:
          type: boolean
          nullable: true
        fcmKey:
          type: string
          nullable: true
        setupPusherNamespaces:
          type: boolean
        apnsCertificate:
          type: string
          nullable: true
        apnsPrivateKey:
          type: string
          nullable: true
        apnsUseSandboxEndpoint:
          type: boolean
          nullable: true
      required:
      - name
    app_patch:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        status:
          type: string
          enum:
          - enabled
          - disabled
        tlsOnly:
          type: boolean
          nullable: true
        enablePusherCompatibility:
          type: boolean
          nullable: true
        fcmKey:
          type: string
          nullable: true
        setupPusherNamespaces:
          type: boolean
        apnsCertificate:
          type: string
          nullable: true
        apnsPrivateKey:
          type: string
          nullable: true
        apnsUseSandboxEndpoint:
          type: boolean
          nullable: true
    app_pkcs12:
      type: object
      additionalProperties: false
      properties:
        p12File:
          type: string
          format: binary
        p12Pass:
          type: string
      required:
      - p12File
      - p12Pass
    app_response:
      type: object
      additionalProperties: false
      properties:
        id:
          description: The application ID.
          type: string
        name:
          description: The application name.
          type: string
        status:
          description: The application status. Disabled applications will not accept new connections and will return an error to all clients.
          type: string
          enum:
          - enabled
          - disabled
        tlsOnly:
          description: Enforce TLS for all connections. This setting overrides any channel setting.
          type: boolean
          nullable: true
        enablePusherCompatibility:
          description: Enables Pusher protocol adapter. Disabled by default. More information is available <a href="https://knowledge.ably.com/using-the-ably-pusher-protocol-adapter">here</a>.
          type: boolean
          nullable: true
        fcmKey:
          description: 
          type: string
          nullable: true
        apnsCertificate:
          description: Apple Push Notification service certificate.
          type: string
          nullable: true
        apnsUseSandboxEndpoint:
          description: Apple Push Notification service endpoint.
          type: boolean
          nullable: true
        _links:
          type: object
          nullable: true
          description: A link self-referencing the app that has been created.
    key_post:
      type: object
      additionalProperties: false
      properties:
        name:
          description: The name for your API key. This is a friendly name for your reference.
          type: string
        channels:
          description: Specify the channels and queues that this key can be used with.
          type: string
        capabilities:
          description: The capabilities that this key has. More information on capabilities can be found <a href="https://ably.com/documentation/core-features/authentication#capabilities-explained">here</a>.
          type: array
          items:
            type: string
            enum:
            - publish
            - subscribe
            - history
            - presence
            - channel-metadata
            - push-admin
            - push-subscribe
            - statistics
      required:
      - name
      - channels
      - capabilities
    key_patch:
      type: object
      additionalProperties: false
      properties:
        name:
          description: The name for your API key. This is a friendly name for your reference.
          type: string
        channels:
          description: Specify the channels and queues that this key can be used with.
          type: string
        capabilities:
          description: The capabilities that this key has. More information on capabilities can be found <a href="https://ably.com/documentation/core-features/authentication#capabilities-explained">here</a>.
          type: array
          items:
            type: string
            enum:
            - publish
            - subscribe
            - history
            - presence
            - channel-metadata
            - push-admin
            - push-subscribe
            - statistics
    key_response:
      type: object
      additionalProperties: false
      properties:
        appId:
          description: The application ID which this key is associated with.
          type: string
        id:
          description: The key ID.
          type: string
        name:
          description: The name of the application this key is associated with.
          type: string
        key:
          description: The complete API key including API secret.
          type: string
        capability:
          description: The capabilities that this key has. More information on capabilities can be found <a href="https://ably.com/documentation/core-features/authentication#capabilities-explained">here</a>.
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              enum:
              - publish
              - subscribe
              - history
              - presence
              - channel-metadata
              - push-admin
              - push-subscribe
              - statistics        
        created:
          type: integer
          description: Unix timestamp representing the date and time of creation of the key.
        modified:
          type: integer
          description: Unix timestamp representing the date and time of the last modification of the key.
    me:
      type: object
      additionalProperties: false
      properties:
        token:
          type: object
          additionalProperties: false
          properties:
            id:
              type: integer
            name:
              type: string
            capabilities:
              type: array
              items:
                type: string
          required:
          - id
          - name
          - capabilities
        user:
          type: object
          additionalProperties: false
          properties:
            id:
              type: integer
            email:
              type: string
          required:
          - id
          - email
        account:
          type: object
          additionalProperties: false
          properties:
            id:
              type: string
            name:
              type: string
          required:
          - id
          - name
    error:
      type: object
      additionalProperties: false
      properties:
        message:
          type: string
        code:
          type: integer
        statusCode:
          type: integer
        href:
          type: string
        details:
          type: object
          nullable: true
      required:
      - message
      - code
      - statusCode
      - href
